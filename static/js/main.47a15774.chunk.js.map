{"version":3,"sources":["components/Home.js","components/misc/Button.js","components/misc/InputField.js","components/Navbar.js","components/Survey.js","components/Data.js","App.js","index.js"],"names":["Home","props","className","status","ip","port","type","Button","disabled","btnClass","onClick","label","InputField","divClass","labelClass","inputClass","onChange","Navbar","useState","menuClick","setMenuClick","connectionClick","setConnectionClick","resetNavigation","to","ipChange","rosConnected","portChange","handleConnection","handleDisconnection","Survey","Data","App","ROSTopics","ros","tp_status","ROSLIB","Topic","name","messageType","subscribe","message","alert","data","Ros","url","state","on","setState","close","handleIpChange","e","target","value","handlePortChange","window","this","path","exact","component","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yTAiFeA,MA7Ef,SAAcC,GACZ,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,oBAAIA,UAAU,cAAd,4BACA,uBAAOA,UAAU,aAAjB,SACE,kCACE,+BACE,oBAAIA,UAAU,mBAAd,qBACA,6BAAKD,EAAME,OAAS,YAAc,qBAEpC,+BACE,oBAAID,UAAU,mBAAd,iBACA,6BAAKD,EAAME,OAASF,EAAMG,GAAK,WAEjC,+BACE,oBAAIF,UAAU,mBAAd,mBACA,6BAAKD,EAAME,OAASF,EAAMI,KAAO,mBAMzC,sBAAKH,UAAU,wBAAf,UACE,oBAAIA,UAAU,cAAd,8BACA,uBAAOA,UAAU,aAAjB,SACE,kCACE,+BACE,oBAAIA,UAAU,mBAAd,qBACA,wCAEF,+BACE,oBAAIA,UAAU,mBAAd,mBACA,yCAEF,+BACE,oBAAIA,UAAU,mBAAd,sBACA,0CAEF,+BACE,oBAAIA,UAAU,mBAAd,sBACA,0CAEF,+BACE,oBAAIA,UAAU,mBAAd,oBACA,0CAEF,+BACE,oBAAIA,UAAU,mBAAd,oBACA,0CAEe,SAAfD,EAAMK,KACN,+BACE,oBAAIJ,UAAU,mBAAd,qBACA,wCAGF,qCACE,+BACE,oBAAIA,UAAU,mBAAd,uBACA,wCAEF,+BACE,oBAAIA,UAAU,mBAAd,uBACA,yD,cCtDLK,MAbf,SAAgBN,GAEd,OACE,wBACEO,SAAUP,EAAMO,SAChBN,UAAWD,EAAMQ,SACjBC,QAAST,EAAMS,QAHjB,SAKGT,EAAMU,S,OCGEC,MAXf,SAAoBX,GAGlB,OACE,sBAAKC,UAAWD,EAAMY,SAAtB,UACE,uBAAOX,UAAWD,EAAMa,WAAxB,SAAqCb,EAAMU,QAC3C,uBAAOH,SAAUP,EAAMO,SAAUN,UAAWD,EAAMc,WAAYT,KAAML,EAAMK,KAAMU,SAAUf,EAAMe,eC6GvFC,MA9Gf,SAAgBhB,GAAQ,IAAD,EAEeiB,oBAAS,GAFxB,mBAEbC,EAFa,KAEFC,EAFE,OAG2BF,oBAAS,GAHpC,mBAGbG,EAHa,KAGIC,EAHJ,KAwBfC,EAAkB,WACtBH,GAAa,IAGf,OACE,sBAAKlB,UAAaiB,GAAaE,EAAmB,gCAAkC,yBAApF,UAGE,mBAAGnB,UAAYmB,EAAuD,2BAArC,mCAAkEX,QA1BzE,WAE1BY,GADgB,IAAdH,IAGkBE,MAyBpB,qBAAKnB,UAAU,cAAf,SACE,cAAC,IAAD,CAAMsB,GAAG,IAAItB,UAAU,cAAvB,sBAMF,mBAAGA,UAAYiB,EAAwC,2BAA5B,0BAAwDT,QA3BpE,WAEfU,GADuB,IAApBC,IAGWF,MA0Bd,qBAAKjB,UAAYmB,EAAwC,2CAAtB,oBAAnC,SACE,qBAAInB,UAAU,yBAAd,UACE,oBAAIA,UAAU,8BAAd,SACE,cAAC,EAAD,CACES,MAAM,OACNK,SAAUf,EAAMwB,SAChBjB,SAAUP,EAAMyB,aAChBb,SAAS,0BACTC,WAAW,gCACXC,WAAW,oCAGf,oBAAIb,UAAU,8BAAd,SACE,cAAC,EAAD,CACEM,SAAUP,EAAMyB,aAChBf,MAAM,SACNK,SAAUf,EAAM0B,WAChBd,SAAS,0BACTC,WAAW,gCACXC,WAAW,yCAGf,oBAAIb,UAAU,8BAAd,SACE,cAAC,EAAD,CACEM,SAAUP,EAAMyB,aAChBf,MAAM,UACND,QAAST,EAAM2B,iBACfnB,SAAS,qCAGb,oBAAIP,UAAU,8BAAd,SACE,cAAC,EAAD,CACEM,UAAWP,EAAMyB,aACjBf,MAAM,aACNF,SAAS,iCACTC,QAAST,EAAM4B,6BAOvB,qBAAK3B,UAAYiB,EAAkC,2CAAtB,oBAA7B,SACE,sBAAKjB,UAAU,yBAAf,UACE,qBAAKA,UAAU,8BAAf,SACE,cAAC,IAAD,CAAMsB,GAAG,IAAItB,UAAU,cAAcQ,QAASa,EAA9C,oBAIF,qBAAKrB,UAAU,8BAAf,SACE,cAAC,IAAD,CAAMsB,GAAG,UAAUtB,UAAU,cAAcQ,QAASa,EAApD,sBAIF,qBAAKrB,UAAU,8BAAf,SACE,cAAC,IAAD,CAAMsB,GAAG,QAAQtB,UAAU,cAAcQ,QAASa,EAAlD,6B,aChFGO,MArBf,WACE,OACE,sBAAK5B,UAAU,SAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,+BAAf,0BAIA,qBAAKA,UAAU,+BAAf,0BAKF,sBAAKA,UAAU,+BAAf,UACE,cAAC,EAAD,CAAQS,MAAM,QAAQH,UAAU,IAChC,cAAC,EAAD,CAAQG,MAAM,gBCVPoB,MARf,WACE,OACE,mCACE,yCC0GSC,E,kDAnGb,WAAY/B,GAAO,IAAD,8BAEhB,cAAMA,IAeRgC,UAAY,SAACC,GAGX,EAAKC,UAAY,IAAI,EAAKC,OAAOC,MAAM,CACrCH,IAAMA,EACNI,KAAO,gBACPC,YAAc,oBAGhB,EAAKJ,UAAUK,WAAU,SAACC,GACxBC,MAAMD,EAAQE,UA3BA,EA+BlBf,iBAAmB,WACjB,IAEE,EAAKM,IAAM,IAAI,EAAKE,OAAOQ,IAAI,CAC7BC,IAAM,QAAU,EAAKC,MAAM1C,GAAK,IAAM,EAAK0C,MAAMzC,OAInD,EAAK6B,IAAIa,GAAG,cAAc,WACxB,EAAKC,SAAS,CAAEtB,cAAe,IAC/B,EAAKO,UAAU,EAAKC,QAItB,EAAKA,IAAIa,GAAG,SAAS,WACnBL,MAAM,8DAIR,EAAKR,IAAIa,GAAG,SAAS,WACnB,EAAKC,SAAS,CAAEtB,cAAe,OAIjC,SACAgB,MAAM,2BAxDQ,EA4DlBb,oBAAsB,WACpB,EAAKK,IAAIe,QACT,EAAKD,SAAS,CAACtB,cAAe,KA9Dd,EAkElBwB,eAAiB,SAACC,GAAO,EAAKH,SAAS,CAAC5C,GAAK+C,EAAEC,OAAOC,SAlEpC,EAmElBC,iBAAmB,SAACH,GAAO,EAAKH,SAAS,CAAC3C,KAAO8C,EAAEC,OAAOC,SA9DxD,EAAKP,MAAQ,CACX1C,GAAK,GACLC,KAAO,GACPqB,cAAe,GAIjB,EAAKU,OAASmB,OAAOnB,OAZL,E,0CAqElB,WACE,OACE,eAAC,IAAD,WAEE,cAAC,EAAD,CACEV,aAAc8B,KAAKV,MAAMpB,aACzBE,iBAAkB4B,KAAK5B,iBACvBC,oBAAqB2B,KAAK3B,oBAC1BJ,SAAU+B,KAAKN,eACfvB,WAAY6B,KAAKF,mBAGnB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,EAAD,CACEvD,OAAQqD,KAAKV,MAAMpB,aACnBtB,GAAIoD,KAAKV,MAAM1C,GACfC,KAAMmD,KAAKV,MAAMzC,KACjBC,KAAK,WAIT,cAAC,IAAD,CAAOmD,KAAK,UAAUE,UAAW7B,IACjC,cAAC,IAAD,CAAO2B,KAAK,QAAQE,UAAW5B,c,GA9FvB6B,IAAMC,WCNxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.47a15774.chunk.js","sourcesContent":["\nimport \"./Home.css\"\nimport \"../index.css\"\n\nfunction Home(props) {\n  return(\n    <div className=\"home\">\n      <div className=\"home-config\">\n        <div className=\"glass-component panel\">\n          <h2 className=\"panel-title\">ROS CONNECTION</h2>\n          <table className=\"home-table\">\n            <tbody>\n              <tr>\n                <td className=\"home-table-label\">STATUS:</td>\n                <td>{props.status ? \"CONNECTED\" : \"NOT CONNECTED\" }</td>\n              </tr>\n              <tr>\n                <td className=\"home-table-label\">IP:</td>\n                <td>{props.status ? props.ip : \"N/A\"}</td>\n              </tr>\n              <tr>\n                <td className=\"home-table-label\">PORT:</td>\n                <td>{props.status ? props.port : \"N/A\"}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"glass-component panel\">\n          <h2 className=\"panel-title\">DATA ACQUISITION</h2>\n          <table className=\"home-table\">\n            <tbody>\n              <tr>\n                <td className=\"home-table-label\">STATUS:</td>\n                <td>N/A</td>\n              </tr>\n              <tr>\n                <td className=\"home-table-label\">TYPE:</td>\n                <td>LINE</td>\n              </tr>\n              <tr>\n                <td className=\"home-table-label\">START X:</td>\n                <td>Mundo</td>\n              </tr>\n              <tr>\n                <td className=\"home-table-label\">START Y:</td>\n                <td>Mundo</td>\n              </tr>\n              <tr>\n                <td className=\"home-table-label\">END X:</td>\n                <td>Mundo</td>\n              </tr>\n              <tr>\n                <td className=\"home-table-label\">END Y:</td>\n                <td>Mundo</td>\n              </tr>\n              { props.type === \"line\" ? \n                <tr>\n                  <td className=\"home-table-label\">POINTS:</td>\n                  <td>N/A</td>\n                </tr>\n                :\n                <>\n                  <tr>\n                    <td className=\"home-table-label\">POINTS X:</td>\n                    <td>N/A</td>\n                  </tr>\n                  <tr>\n                    <td className=\"home-table-label\">POINTS X:</td>\n                    <td>N/A</td>\n                  </tr>\n                </>\n              }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction Button(props) {\n\n  return (\n    <button\n      disabled={props.disabled}\n      className={props.btnClass} \n      onClick={props.onClick} \n    >\n      {props.label}\n    </button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nfunction InputField(props) {\n  \n  // Returns input field\n  return (\n    <div className={props.divClass}>\n      <label className={props.labelClass}>{props.label}</label>\n      <input disabled={props.disabled} className={props.inputClass} type={props.type} onChange={props.onChange} />\n    </div>\n  );\n}\n\nexport default InputField;\n","import \"./Navbar.css\"\nimport \"../index.css\"\nimport { React , useState } from 'react';\nimport Button from \"./misc/Button\";\nimport { Link } from 'react-router-dom';\nimport InputField from \"./misc/InputField\";\n\nfunction Navbar(props) {\n\n  const [ menuClick, setMenuClick ] = useState(false);\n  const [ connectionClick, setConnectionClick ] = useState(false);\n\n  // Handles when the connection icon is clicked\n  const connectionClickUpdate = () => {\n    if (menuClick === true) {\n      setConnectionClick(false);\n    } else {\n      setConnectionClick(!connectionClick);\n    }\n  };\n\n  // Handles when the menu icon is clicked\n  const handleMenu = () => {\n    if ( connectionClick === true ) {\n      setMenuClick(false);\n    } else {\n      setMenuClick(!menuClick);\n    }\n  }\n\n  // Resets navigation panel\n  const resetNavigation = () => {\n    setMenuClick(false);\n  }\n\n  return (\n    <nav className={ (menuClick || connectionClick) ? \"glass-component navbar active\" : \"glass-component navbar\" }>\n\n      {/* Mobile connection panel icon */}\n      <i className={!connectionClick ? \"mobile-icon fas fa-network-wired\" : \"mobile-icon fas fa-times\" } onClick={connectionClickUpdate} />\n      \n      {/* LOGO: Sends user to main screen */}\n      <div className=\"navbar-logo\">\n        <Link to=\"/\" className=\"navbar-link\">\n          GPR-20\n        </Link>\n      </div>\n\n      {/* Menu panel icon */}\n      <i className={!menuClick ? \"mobile-icon fas fa-bars\" : \"mobile-icon fas fa-times\"} onClick={handleMenu} />\n\n      {/* CONNECTION PANEL: Allows connection to ROS websocket */}\n      <div className={!connectionClick ? \"navbar-connection\" : \"glass-component navbar-connection active\"} >\n        <ul className=\"navbar-connection-list\">\n          <li className=\"navbar-connection-list-item\">\n            <InputField \n              label=\"IP: \"\n              onChange={props.ipChange}\n              disabled={props.rosConnected}\n              divClass=\"navbar-connection-input\"\n              labelClass=\"navbar-connection-input-label\"\n              inputClass=\"navbar-connection-input-field\"\n            />\n          </li>\n          <li className=\"navbar-connection-list-item\">\n            <InputField \n              disabled={props.rosConnected}\n              label=\"PORT: \"\n              onChange={props.portChange}\n              divClass=\"navbar-connection-input\"\n              labelClass=\"navbar-connection-input-label\"\n              inputClass=\"navbar-connection-input-field port\"\n            />\n          </li>\n          <li className=\"navbar-connection-list-item\">\n            <Button\n              disabled={props.rosConnected}\n              label=\"CONNECT\"\n              onClick={props.handleConnection}\n              btnClass=\"navbar-connection-input-button\"\n            />\n          </li>\n          <li className=\"navbar-connection-list-item\">\n            <Button\n              disabled={!props.rosConnected}\n              label=\"DISCONNECT\"\n              btnClass=\"navbar-connection-input-button\"\n              onClick={props.handleDisconnection}\n            />\n          </li>\n        </ul>\n      </div>\n\n      {/* NAVIGATION PANEL: Sends user to different screens */}\n      <div className={!menuClick ? \"navbar-navigation\" : \"glass-component navbar-navigation active\"}>\n        <div className=\"navbar-navigation-list\">\n          <div className=\"navbar-navigation-list-item\">\n            <Link to=\"/\" className=\"navbar-link\" onClick={resetNavigation}>\n              HOME\n            </Link>\n          </div>\n          <div className=\"navbar-navigation-list-item\">\n            <Link to=\"/survey\" className=\"navbar-link\" onClick={resetNavigation}>\n              SURVEY\n            </Link>\n          </div>\n          <div className=\"navbar-navigation-list-item\">\n            <Link to=\"/data\" className=\"navbar-link\" onClick={resetNavigation}>\n              DATA\n            </Link>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","\nimport \"../index.css\"\nimport \"./Survey.css\"\n\nimport Button from \"./misc/Button\"\n\nfunction Survey() {\n  return(\n    <div className=\"survey\">\n      <div className=\"survey-config\">\n        <div className=\"glass-component survey-panel\">\n          SURVEY SETUP\n        </div>\n\n        <div className=\"glass-component survey-panel\">\n          VNA SETUP\n        </div>\n      </div>\n\n      <div className=\"glass-component main-control\">\n        <Button label=\"START\" disabled={true} />\n        <Button label=\"STOP\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Survey;","\n\n\nfunction Data() {\n  return(\n    <>\n      <h1>Data</h1>\n    </>\n  );\n}\n\nexport default Data;","import './App.css';\n\nimport React from 'react';\nimport Home from \"./components/Home\";\nimport Navbar from \"./components/Navbar\";\n\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Survey from './components/Survey';\nimport Data from './components/Data';\n\n\nclass App extends React.Component {\n  \n  constructor(props){\n    // Initializes super class\n    super(props);\n\n    // Creates state\n    this.state = {\n      ip : \"\",\n      port : \"\",\n      rosConnected : false\n    }\n\n    // Retrieves ROSLIB.js from CDN\n    this.ROSLIB = window.ROSLIB;\n\n  }\n\n  // Function to connect to ROS topics\n  ROSTopics = (ros) => {\n    \n    // Subscribes to status topic\n    this.tp_status = new this.ROSLIB.Topic({\n      ros : ros,\n      name : \"/gpr20/status\",\n      messageType : \"std_msgs/String\"\n    });\n\n    this.tp_status.subscribe((message) => {\n      alert(message.data)\n    });\n  }\n\n  handleConnection = () => {\n    try {\n      // Creates the ROS instance\n      this.ros = new this.ROSLIB.Ros({\n        url : \"ws://\" + this.state.ip + ':' + this.state.port\n      });\n\n      // If connection is successful\n      this.ros.on('connection', () => {\n        this.setState({ rosConnected : true });\n        this.ROSTopics(this.ros)\n      })\n\n      // If connection presents an error\n      this.ros.on('error', () => {\n        alert(\"An error has occured when connecting to the web socket!\")\n      })\n\n      // If connection is closed\n      this.ros.on('close', () => {\n        this.setState({ rosConnected : false });\n      })\n\n    // Handles error related to connection\n    } catch {\n      alert(\"An error has occured!\")\n    }   \n  }\n\n  handleDisconnection = () => {\n    this.ros.close();\n    this.setState({rosConnected : false});\n  }\n  \n  // Hanlder functions for state variables\n  handleIpChange = (e) => {this.setState({ip : e.target.value})};\n  handlePortChange = (e) => {this.setState({port : e.target.value})};\n\n  render(){\n    return (\n      <Router>\n        \n        <Navbar \n          rosConnected={this.state.rosConnected}\n          handleConnection={this.handleConnection}\n          handleDisconnection={this.handleDisconnection}\n          ipChange={this.handleIpChange}\n          portChange={this.handlePortChange}\n        />\n\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home \n              status={this.state.rosConnected}\n              ip={this.state.ip}\n              port={this.state.port}\n              type=\"grid\"\n            />\n          </Route>\n\n          <Route path=\"/survey\" component={Survey} />\n          <Route path=\"/data\" component={Data} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}